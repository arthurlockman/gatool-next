# This file is the main config file for the service.
#
# For full config options, check the docs:
#    docs.serverless.com

service: GAToolBackend

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  role: arn:aws:iam::336977810532:role/service-role/GAToolRole
  stage: production
  environment: # Environment variables available to the whole service
    SERVICE_AWS_REGION: ${self:provider.region}
    FRC_API_KEY: ${ssm:frc-api-key~true}
    TBA_API_HEADER: ${ssm:tba-api-header~true}
    TBA_API_KEY: ${ssm:tba-api-token~true}
    FRC_CURRENT_SEASON: 2018
    HIGH_SCORES_TABLE_NAME: HighScoresTable
    USERS_TABLE_NAME: UsersTable
    WEBSITE_BUCKET: gatoolwebsite
    COGNITO_ARN: arn:aws:cognito-idp:us-east-1:336977810532:userpool/us-east-1_EhZVYw2tf

functions: # TODO: outline all functions
  GetEvents:
    handler: handler.GetEvents
    description: Get events for a specific year
    events:
      - http:
          path: api/{year}/events
          method: get
          cors: true
          authorizer:
            arn: ${env.COGNITO_ARN}
          request:
            parameters:
              paths:
                year: true
  GetEventTeams:
    handler: handler.GetEventTeams
    description: Get teams for a specific event for a specific year
    events:
      - http:
          path: api/{year}/teams/{eventCode}/{page}
          method: get
          cors: true
          authorizer:
            arn: ${env.COGNITO_ARN}
          request:
            parameters:
              paths:
                year: true
                eventCode: true
                page: true
  GetHighScores:
    handler: handler.GetHighScores
    description: Get high scores for a specific year
    events:
      - http:
          path: api/{year}/highscores
          method: get
          cors: true
          authorizer:
            arn: ${env.COGNITO_ARN}
          request:
            parameters:
              paths:
                year: true
  GetTeamAwards:
    handler: handler.GetTeamAwards
    description: Get awards for a specific team in a specific year
    events:
      - http:
          path: api/{year}/awards/{teamNumber}
          method: get
          cors: true
          authorizer:
            arn: ${env.COGNITO_ARN}
          request:
            parameters:
              paths:
                year: true
                teamNumber: true
  GetEventScores:
    handler: handler.GetEventScores
    description: Get scores for a specific event with a year, competition level, and a start/end (match number)
    events:
      - http:
          path: api/{year}/scores/{eventCode}/{tournamentLevel}/{start}/{end}
          method: get
          cors: true
          authorizer:
            arn: ${env.COGNITO_ARN}
          request:
            parameters:
              paths:
                year: true
                eventCode: true
                tournamentLevel: true
                start: true
                end: true
  GetEventSchedule:
    handler: handler.GetEventSchedule
    description: Get the event schedule for a specific event, year, and competition level
    events:
      - http:
          path: api/{year}/schedule/{eventCode}/{tournamentLevel}
          method: get
          cors: true
          authorizer:
            arn: ${env.COGNITO_ARN}
          request:
            parameters:
              year: true
              eventCode: true
              tournamentLevel: true
  GetEventAlliances:
    handler: handler.GetEventAlliances
    description: Get alliance details for an event
    events:
      - http:
          path: api/{year}/alliances/{eventCode}
          method: get
          cors: true
          authorizer:
            arn: ${env.COGNITO_ARN}
          request:
            parameters:
              year: true
              eventCode: true
  GetEventRankings:
    handler: handler.GetEventRankings
    description: Get alliance details for an event
    events:
    - http:
        path: api/{year}/rankings/{eventCode}
        method: get
        cors: true
        authorizer:
          arn: ${env.COGNITO_ARN}
        request:
          parameters:
            year: true
            eventCode: true
  Login:
    handler: handler.Login
    description: Log a user in to the application
    events:
      - http:
          path: api/login
          method: post
          cors: true
  UpdateHighScores:
    handler: handler.UpdateHighScores
    description: Update the event high scores at a regular interval
    timeout: 60
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true

# TODO: outline resources and tables needed for the service

resources:
  Resources:
    HighScoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HighScoresTable
        AttributeDefinitions:
          - AttributeName: yearType
            AttributeType: S
        KeySchema:
          - AttributeName: yearType
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-finch

custom:
  client:
    bucketName: gatoolwebsite
    distributionFolder: ui
    indexDocument: index.html
    errorDocument: error.html
